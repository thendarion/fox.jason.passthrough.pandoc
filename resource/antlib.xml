<?xml version="1.0" encoding="UTF-8" standalone="no"?><!--ant-->
<!--
	This file is part of the DITA-OT Passthrough Pandoc Plug-in project.
	See the accompanying LICENSE file for applicable licenses.
-->
<antlib xmlns:if="ant:if" xmlns:unless="ant:unless">

	<!--
		Individual file processing for pandoc.
		Take an input format run pandoc against it and convert to DITA

		@param src - The input file to convert to DITA
		@param dest - The output file location
		@param title - The title of the converted file
	-->
	<macrodef name="add-pandoc-file">
		<attribute name="src" />
		<attribute name="dest" />
		<attribute name="title" />
		<sequential>
			<local name="pandoc.result"/>
			<local name="pandoc.error"/>

			<echo if:set="pandoc.installed" taskname="pandoc" level="info" message="Processing @{title}" />

			<!-- For Unix run Pandoc as an executable -->
			<mkdir dir="${java.io.tmpdir}"/>
			<exec executable="pandoc" dir="${java.io.tmpdir}" osfamily="unix" taskname="pandoc" errorproperty="pandoc.error" resultproperty="pandoc.result" >
				<arg line="&quot;@{src}&quot;  -t &quot;${basedir}/resource/topic.lua&quot; -o  &quot;@{dest}&quot; -M title=&quot;@{title}&quot; "/>
		    </exec>
			<!-- For Windows run from a DOS command -->
			<exec if:set="pandoc.installed" executable="cmd" dir="${java.io.tmpdir}" osfamily="windows" taskname="pandoc" errorproperty="pandoc.error" resultproperty="pandoc.result">
				<arg value="/C"/>
				<arg value="pandoc &quot;@{src}&quot;  -t &quot;${basedir}/resource/topic.lua&quot; -o &quot;@{dest}&quot; -M title=&quot;@{title}&quot; "/>
			</exec>
		    
			<process-pandoc-errors src="@{src}" result="${pandoc.result}" message="${pandoc.error}"/>
		</sequential>
	</macrodef>

	<!--
		Flag up any error messages created during file processing

		@param src - The input file to convert to DITA
		@param result - Whether Pandoc succeeded or failed
		@param message - err.out from Pandoc
	-->
	<macrodef name="process-pandoc-errors">
		<attribute name="result" />
		<attribute name="message" />
		<attribute name="src" />
		<sequential>
			<local name="pandoc.isError"/>
			<local name="pandoc.message.code"/>

			<condition property="pandoc.isError">
				<not>
					<equals arg1="@{result}" arg2="0"/>
			    </not>
			</condition>

			<echo taskname="pandoc" if:set="pandoc.isError" level="error" message="@{message}"/>
			

			<fail id="PAND003F" if:set="pandoc.isError" message="Pandoc failed to generate documentation: @{src}"/>

			<condition property="pandoc.message.code" value="PAND002W">
				<contains string="@{message}" substring="Multiple Root Nodes detected."/>
			</condition>

			<echo level="info" if:set="pandoc.message.code" id="${pandoc.message.code}" message="Multiple H1 headers detected in file: $title"/>
		</sequential>
	</macrodef>
</antlib>